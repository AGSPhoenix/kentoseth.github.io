<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kentoseth Blog</title><link>/</link><description>Coding. Linux. Data Science. Python. Web.</description><atom:link href="/feeds/moe-h.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 22 Aug 2016 02:00:00 +0200</lastBuildDate><item><title>Basics of LXC: 2 of 2</title><link>/2016/Aug/22/basics-of-lxc-2-of-2/</link><description>&lt;p&gt;In my previous blog post, I mentioned why I moved from Docker to LXC (reference: &lt;a href="https://kentoseth.github.io/2016/May/17/moving-from-docker-to-lxc-1-of-2-the-why/"&gt;here&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;I also mentioned 7 basic commands you will need to get started with LXC. I will list them and walk-through each below.&lt;/p&gt;
&lt;h3&gt;Container Basics&lt;/h3&gt;
&lt;p&gt;Let us start by creating and starting a container:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-create -n myfirstcont -t ubuntu&lt;/p&gt;
&lt;p&gt;sudo lxc-start -n myfirstcont -d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first command will create a container called &lt;code&gt;myfirstcont&lt;/code&gt; from the &lt;em&gt;remote&lt;/em&gt; Ubuntu template.&lt;/p&gt;
&lt;p&gt;After the first command has successfully executed, you can start the container using the second command (lxc-start).&lt;/p&gt;
&lt;p&gt;Next, we will get &lt;em&gt;into&lt;/em&gt; the container:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-attach -n myfirstcont&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command will take you into the container as the root user.&lt;/p&gt;
&lt;p&gt;Once you are in the container, you can work with it as you normally would in a regular Ubuntu OS (although a number of regular/standard packages may not be present).&lt;/p&gt;
&lt;p&gt;Now that we started our container and we have also managed to get &lt;em&gt;within&lt;/em&gt; the container (via lxc-attach), we may need to obtain some information about the container to work with it externally.&lt;/p&gt;
&lt;p&gt;A common example is when we start an HTTP-server within the container (and bind the server to the 0.0.0.0 IP). To obtain the IP-address assigned to the container (as well as other basic information), we will use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-info -n myfirstcont&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will get a basic amount of information using the &lt;code&gt;lxc-info&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;The next 2 commands will stop and destroy your container.&lt;/p&gt;
&lt;p&gt;Stopping:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-stop -n myfirstcont&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Destroying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-destroy -n myfirstcont&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The container itself will be destroyed, but your template (somewhat similar to a Docker image) will still exist.&lt;/p&gt;
&lt;p&gt;The last command is to list all containers on your system. The command will list all containers, regardless of state:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-ls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One important thing to mention about this tutorial is that we are using the default LXC instructions and creating &lt;em&gt;priviledged&lt;/em&gt; containers by using &lt;code&gt;sudo&lt;/code&gt;. I recommend reading up about the priviledged/unpriviledged aspects of containers &lt;a href="https://help.ubuntu.com/lts/serverguide/lxc.html#lxc-basic-usage"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;h3&gt;Mounting&lt;/h3&gt;
&lt;p&gt;In my first post, I mentioned that mounting from the host &amp;gt; container or vice-versa took a bit of time to figure out. For the purposes of simplicity and ease-of-use for anyone reading this, here is a set of commands to use for mounting.&lt;/p&gt;
&lt;p&gt;Host-to-container:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mount --bind /var/lib/lxc/myfirstcont/rootfs/home/ubuntu/myfolder/ /Project/path/to/hostfolder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Container-to-host:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mount --bind /Project/path/to/hostfolder /var/lib/lxc/myfirstcont/rootfs/home/ubuntu/myfolder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Installing small Python library in a container&lt;/h3&gt;
&lt;p&gt;If you have not destroyed the container you created above, let us go ahead and restart the container:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lxc-start -n myfirstcont -d&lt;/p&gt;
&lt;p&gt;sudo lxc-attach -n myfirstcont&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should be attached as the root-user within the container.&lt;/p&gt;
&lt;p&gt;Now run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get update
apt-get upgrade
apt-get install -y python3-pip
pip3 install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have now successfully created an LXC container for the static site-generator &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; .&lt;/p&gt;
&lt;h3&gt;LXD as an easier LXC-manager&lt;/h3&gt;
&lt;p&gt;In the final part of this blog post, I would like to mention &lt;a href="https://linuxcontainers.org/lxd/"&gt;LXD&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Although the link above explains things better than I can, LXD is a very useful LXC-manager. It provides unpriviledged containers by default and uses the Docker image/container approach (instead of templates).&lt;/p&gt;
&lt;p&gt;LXD provides a host of other features that would be useful for large-scale container-management.&lt;/p&gt;
&lt;p&gt;I would strongly urge anyone interested in using LXC-containers in production to consider using LXD to manage your infrastructure.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moe. H</dc:creator><pubDate>Mon, 22 Aug 2016 02:00:00 +0200</pubDate><guid>tag:,2016-08-22:2016/Aug/22/basics-of-lxc-2-of-2/</guid><category>ubuntu</category><category>LXC</category><category>docker</category></item><item><title>Moving from Docker to LXC: 1 of 2 (The why)</title><link>/2016/May/17/moving-from-docker-to-lxc-1-of-2-the-why/</link><description>&lt;p&gt;Ever since discovering Docker, I've been a huge fan of the whole concept of containers and how they separate concerns.&lt;/p&gt;
&lt;p&gt;Up until recently, I always saw a container as a "container", and did not understand that Docker is very specific about what they interpret a container to be. Then 1 day, I wished to try to install a bunch of different applications to get a mail-server running (namely: Postfix, Dovecot and Roundcube).&lt;/p&gt;
&lt;p&gt;Much to my dismay, I discovered that it was a real PITA to install these things into a single Docker container. Digging deeper into my issues, I was led to the discovery that Dockers philosophy is driven by the whole "micro-services" concept. What this means is that Docker views each container as something that does a single process and a single process alone. You can make the process as big (or small) as you wish, but the goal of this philosophy is to encourage small services vs. a monolith (or so I interpreted it as that). Think about it as: confining your single search box into its own process vs. the big box of bad that is "WordPress, Apache, MySQL and PHP combined".&lt;/p&gt;
&lt;p&gt;Well things weren't going too great, so after wrangling lots of minds on #Docker and asking a few friends/colleagues via various mediums, it was brought to my attention that perhaps LXC would be a better option for what I wished to do. I could dump entire monoliths into LXC and that would be fine.&lt;/p&gt;
&lt;p&gt;During my research time, I also found this really cool infographic (with detailed article) that everyone learning about containers should see:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flockport.com/wp-content/uploads/2014/08/lxc-vs-docker5.png"&gt;Flockport: Docker vs. LXC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Being able to understand this fully will probably save you (and likely myself) lots of headaches in the future, especially as we all move to the containerized world in 2016 and beyond. Just like many developers out there in the far reaches of the world, I am but a small fry. I used to use Docker as a drop-in replacement for virtualenv for separating my Python projects. This did work reasonably well, but when I decided that I'd like to get my Postfix/Dovecot monolith up, the not-so-obvious warts crept in. I'm no Google/Amazon and I can probably get by with 98% of my projects being monoliths. The micro-service architecture also adds a level of complexity that turns the 1-man coder into a certified devops/sysadmin that needs to understand a lot of important things on that devops/sysadmin level.&lt;/p&gt;
&lt;p&gt;From a security point-of-view, if you don't get things right with Docker containers, you can/will probably shoot yourself in the foot (when containers were meant to protect you from shots in the first place).&lt;/p&gt;
&lt;h3&gt;So what is this LXC thing?&lt;/h3&gt;
&lt;p&gt;I don't (and probably can't) go into too much detail about the technical workings of LXC. Simply put, LXC is the (apparent) daddy of the container eco-system. In fact, I don't think words can ever explain it as good as the infographic above, so please go look at it again.&lt;/p&gt;
&lt;p&gt;Docker has an interesting relationship with LXC. It was built on top of it (with the micro-service philosophy in mind), but I have since heard/read that they have moved away from LXC (on some level I assume).&lt;/p&gt;
&lt;p&gt;When I first heard that Docker was "built on top of LXC", my first reaction to it was on a level similar to that of people saying "I built a layer on top of the C API", indicating that a major layer of complexity was taken out of the equation (C code is C code afterall).&lt;/p&gt;
&lt;p&gt;Fortunately for the 1-man-coder, wordpress-hackers, beginner-coders and more, LXC is not as complex as you might think it could be (and it definitely was not the nightmare I thought it would be - thinking I'd need to write C/other-boilerplate-code just to build/run containers). I even noted down a few commands to get the basics working, and the total of these commands came to: 7&lt;/p&gt;
&lt;p&gt;With these 7 commands, you can: create, start, stop, attach (get into), info (get properties), destroy and "ls" (get a full list of all containers)&lt;/p&gt;
&lt;p&gt;Once you get your first LXC container going though, it starts to feel a lot more like regular Linux/Ubuntu, compared to Dockers opinionated way of doing things.&lt;/p&gt;
&lt;p&gt;The only terrible/difficult thing so far has been to attach a host filesystem to an LXC container (which took a day or 2 to figure out), but LXC seems more in tune with my current needs as a tinkerer/programmer/1-man-coder.&lt;/p&gt;
&lt;h3&gt;Is it already time to start bashing Docker yet?&lt;/h3&gt;
&lt;p&gt;Not at all. Docker has its place and it will be used a lot at many different places. The only problem I personally see is the "bandwagon" issue. A lot of people are trying to get into containerization without fully understanding Dockers philosophy ("micro-services architecture").&lt;/p&gt;
&lt;p&gt;That infographic I linked to above explains things a million times more clearly than the wads of text I had to read through (whilst learning about containers since a year or 2 ago).&lt;/p&gt;
&lt;p&gt;Just remember that: micro-services are based on an architectural decision to address the issues at a Google/Amazon level&lt;/p&gt;
&lt;p&gt;This blog, a drop-in for virtualenv for Python environments or your dads WordPress business-site probably don't need a Docker container (and some would argue that they probably don't need any containerization - LXC included - at all).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Moving forward, I will be (and have been) learning/using LXC as my go-to for containers.&lt;/p&gt;
&lt;p&gt;In part 2 of this 2-part blog, I will do a basic walk-through of installing LXC, creating a bare/minimal container(Ubuntu) and then slapping an example Python library/software (possibly Pelican, Twisted or some other library) onto a container built on top of the bare/minimal Ubuntu container.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moe. H</dc:creator><pubDate>Tue, 17 May 2016 02:00:00 +0200</pubDate><guid>tag:,2016-05-17:2016/May/17/moving-from-docker-to-lxc-1-of-2-the-why/</guid><category>ubuntu</category><category>LXC</category><category>docker</category></item><item><title>Guerrilla guide to using Docker</title><link>/2015/May/19/guerrilla-guide-to-using-docker/</link><description>&lt;p&gt;This is a quick-start intro to using Docker. For the long-form version of "Getting Started with Docker" please see: &lt;a href="https://docs.docker.com/installation/#installation"&gt;Docker Basics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial should take you &lt;em&gt;less than 15 minutes&lt;/em&gt; to get up and running with Docker (this excludes the time it takes to install Docker itself and downloading of the source files). Also note that this tutorial assumes you are using Ubuntu (or a variant thereof).&lt;/p&gt;
&lt;p&gt;If you haven't installed Docker already, go ahead and use the link above to install it.&lt;/p&gt;
&lt;h3&gt;Images, Containers and Dockerfiles&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Image:&lt;/em&gt; Think of this as a static snapshot of your Docker setup. Images are layered on top of each other like an onion, so that it does not duplicate the same core files repeatedly (for example, creating many different "stacks" on top of an Ubuntu image will not recreate Ubuntu each time). Images are never used explicitly and are used as the base for creating Containers. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Container:&lt;/em&gt; Containers are dynamic versions of Images. Think of a Container as the fake version of priceless art. You would never touch or damage the original (Image) but you can do whatever you like with a fake (Container). Containers can be made, modified and destroyed very easily (they also act as the tool for building on images)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dockerfile:&lt;/em&gt; This is the formal method of building Images. Think of the Dockerfile as a Shell Script for installing something (it works almost exactly the same).&lt;/p&gt;
&lt;h3&gt;Building an Image: Ubuntu + Python&lt;/h3&gt;
&lt;p&gt;Let us first create a Docker folder. Open up your File Manager and create a folder so that you get this path:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/[USER]/Docker/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, I will walk you through my simple Dockerfile for this (you can download it here: &lt;a href="https://registry.hub.docker.com/u/dockops/ubuntupy/"&gt;File&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;Here is the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 
# Dockerfile to use as a base for python
#
# Combines Ubuntu + Python
#
# https://github.com/Kentoseth/Docker/tree/master/UbuntuPy

FROM ubuntu:14.04
MAINTAINER &amp;quot;Moe&amp;quot; &amp;lt;kentoseth@devcroo.com&amp;gt;

# Prerequisites

RUN \
  sudo apt-get update &amp;amp;&amp;amp; \
  sudo apt-get -y upgrade &amp;amp;&amp;amp; \
  sudo apt-get install -y python2.7 python2.7-dev python-pip &amp;amp;&amp;amp; \
  sudo apt-get clean &amp;amp;&amp;amp; \
  sudo rm -rf /var/lib/apt/lists/*

# END
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save a file called "Dockerfile" in: /home/[USER]/Docker/&lt;/p&gt;
&lt;p&gt;I will just tell you 2 important things from the above code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where you see the word "FROM", what this is doing is "pulling" the Ubuntu image from the remote Docker registry&lt;/li&gt;
&lt;li&gt;For everything after the line "RUN \", you should notice this as basic Ubuntu install commands&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now let's build our first Docker image.&lt;/p&gt;
&lt;p&gt;Open your Terminal where the Dockerfile is (/home/[USER]/Docker/) and run this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo docker build -t pybuntu .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can rename "myapp" to anything you wish, as this is the name of your image. In this case, because it is Ubuntu + Python, you can call it something like "pybuntu" or whatever helps you recognize the image (only lowercase works). Also, you will see a ' . ' in my command above. This isn't an error, so please include it as well (you can learn about about "complex" build-procedures from the link above).&lt;/p&gt;
&lt;p&gt;After the build process is complete, let's view our new Docker image. Run this command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo docker images&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you should get this output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo1" src="/images/docker/docker2.png" /&gt;&lt;/p&gt;
&lt;p&gt;From the above image, you can see I have 3 images. We haven't yet got to the "pelicanpy" yet, but if you've followed my instructions and everything worked, you should have something similar to "ubuntupy" (or myapp/image-name).&lt;/p&gt;
&lt;h3&gt;Creating a container: from 'pybuntu' image&lt;/h3&gt;
&lt;p&gt;Now that we have our image, lets use this image ( &lt;em&gt;static&lt;/em&gt; ) to make our container ( &lt;em&gt;dynamic&lt;/em&gt; ).&lt;/p&gt;
&lt;p&gt;First, we can create a directory where we can "mount" files into the container from our filesystem (so that we can run them in the container).&lt;/p&gt;
&lt;p&gt;You can create your directory here(with subdirectory called "mount/test"):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/[USER]/Docker/mount/test/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let's create a container that has a 'mounted' path from your Ubuntu/linux system.&lt;/p&gt;
&lt;p&gt;Open your commandline (in any directory) and run the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo docker run -i -t -v /home/[USER]/Docker/mount/test/:/test pybuntu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A quick walk-through of the line above is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every "-[LETTER]" command corresponds to some commandline specification (more info on the site)&lt;/li&gt;
&lt;li&gt;Some commands, like "-v" have instructions that follow them. In this case, "-v" is used for mounting. First we declare the system path (.../mount/test/), then we declare the folder within the container(:/test). Note that the path in the container &lt;strong&gt;has&lt;/strong&gt; to be declared&lt;/li&gt;
&lt;li&gt;Lastly, you call on "pybuntu", which is basically telling the container which image to use as the "dynamic" version of that "static" screenshot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you're done creating the container, you should see something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo2" src="/images/docker/con1.png" /&gt;&lt;/p&gt;
&lt;p&gt;From the image above, you can now see that you are a "root" user in your container.&lt;/p&gt;
&lt;p&gt;Let's go into our mounted directory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once in, let's create a test python file. We will call it "hello.py". Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#This is our test Python file

print(&amp;quot;Hello World!&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save your file in your mounted directory (.../mount/test/hello.py)&lt;/p&gt;
&lt;p&gt;Now, within the container terminal, run this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python hello.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Hello World!&lt;/em&gt; should be printed out in the terminal now.&lt;/p&gt;
&lt;p&gt;Once done, you have now successfully created your Docker Image and a Container of that Image.&lt;/p&gt;
&lt;p&gt;I will follow up this tutorial with how to use Docker as a drop-in replacement for virtualenv (or any programming virtual environment for that matter) soon.&lt;/p&gt;
&lt;p&gt;Enjoy containerizing everything!&lt;/p&gt;
&lt;p&gt;(&amp;lt;- Email me if you find any faults or can make any improvements)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moe. H</dc:creator><pubDate>Tue, 19 May 2015 02:00:00 +0200</pubDate><guid>tag:,2015-05-19:2015/May/19/guerrilla-guide-to-using-docker/</guid><category>ubuntu</category><category>python</category><category>docker</category></item><item><title>Single Package Update across Ubuntu PCs</title><link>/2014/Oct/16/single-package-update-across-ubuntu-pcs/</link><description>&lt;p&gt;If you live in a country with a slow internet connection, have limited bandwidth capacity, have multiple machines or would like to conserve your bandwidth by not doing repeat downloads, this tutorial will be useful to you.&lt;/p&gt;
&lt;p&gt;I recently came across a rather simple method for keeping my machines updated with the latest packages by downloading the updates once and then using those packages to update the other machines/PCs.&lt;/p&gt;
&lt;p&gt;Here is a checklist before attempting this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All machines should be using the same version of Linux on the same processor-type (eg. Ubuntu 12.04, 32-bit)&lt;/li&gt;
&lt;li&gt;The machine where you do the initial updates requires SSH to be installed&lt;/li&gt;
&lt;li&gt;All the machines should be connected via a router/LAN&lt;/li&gt;
&lt;li&gt;Passwords for all the machines will be required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The steps provided below will be done on Ubuntu machines. Similar commands from other distros should be applied where Ubuntu-commands are used. (paths for the packages may differ though)&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Step 1 - Installing SSH:&lt;/h3&gt;
&lt;p&gt;Getting SSH installed on your main download machine can be done in a single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install openssh-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you'd like more info on SSH (maybe for installing on a remote server),  &lt;a href="http://www.ihaveapc.com/2012/02/how-to-install-ssh-server-on-ubuntu/"&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 2 - Updating packages for main machine + IP address:&lt;/h3&gt;
&lt;p&gt;First do your updates on the main machine (either through Terminal or via the Update Manager). Once that is done, you will now (mostly) be doing everything else on your other machines (I will refer to them as &lt;em&gt;"client"&lt;/em&gt; machines).&lt;/p&gt;
&lt;p&gt;Let's first get the IP address of the &lt;strong&gt;main&lt;/strong&gt; machine. Type this command in Terminal/CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be looking for a line like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;inet addr:192.$$$.$.$  Bcast:192.$$$.$.$$$  Mask:255.$$$.$$$.$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;($ = numbers)&lt;/p&gt;
&lt;p&gt;After typing the command above, let us use an example IP address of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;192.168.1.102&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to remember this IP address, as this is what you will use to connect from client machines to your updated/main machine.&lt;/p&gt;
&lt;h3&gt;Step 3 - Updating client machines:&lt;/h3&gt;
&lt;p&gt;Take one of your client laptops/desktops (which is connected to the same router as the main machine) and open Terminal/CLI. In the Terminal, type this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;scp&lt;/span&gt; &lt;span class="n"&gt;kent&lt;/span&gt;&lt;span class="mf"&gt;@192.168.1.102&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archives&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deb&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archives&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"kent" is the name of the main machine. You need to specify the name you are using on your main machine where "kent" is.&lt;/p&gt;
&lt;p&gt;This command is "secure copy" (scp) which transfers the archives of the updated machine to your client machines. You can read from the command how it is copying archives from one folder to another.&lt;/p&gt;
&lt;p&gt;You will likely be asked for the passwords of both machines (client and main machine) after using the command above. If everything was successful, you should see a transfer or files being done.&lt;/p&gt;
&lt;p&gt;Your client machine should now have the updated .deb files, so let's do the actual update on the client machine. Type this (still in Terminal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have all your packages updated.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note 1: The linux system files don't seem to update after running "&lt;strong&gt;sudo apt-get upgrade&lt;/strong&gt;", but you can update them through the update manager&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note 2: Even if you have different packages on your machines (like extra packages on the main machine), the other packages that weren't previously installed on your client machine will &lt;em&gt;not&lt;/em&gt; be installed&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moe. H</dc:creator><pubDate>Thu, 16 Oct 2014 02:00:00 +0200</pubDate><guid>tag:,2014-10-16:2014/Oct/16/single-package-update-across-ubuntu-pcs/</guid><category>ubuntu</category><category>updates</category><category>ssh</category></item><item><title>Install Ubuntu Server using Wubi</title><link>/2014/Jul/01/install-ubuntu-server-using-wubi/</link><description>&lt;p&gt;If you're somebody that has tinkered with linux a while back, you may have come across something called &lt;a href="https://wiki.ubuntu.com/WubiGuide"&gt;Wubi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wubi basically allows you to install linux &lt;em&gt;within&lt;/em&gt; windows.&lt;/p&gt;
&lt;p&gt;You will probably want to install Ubuntu Server with Wubi if you have a Windows system that you feel you still need, but you'd also like to tinker/test-out a server-version of Ubuntu.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This install method is recommended for hobbyists and shouldn't be used for any production-critical matters&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that said, let's install ubuntu-server within windows using Wubi.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Requirements:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PC with Ubuntu/Xubuntu/Lubuntu Desktop installed (preferably 12.04 and nothing above this version)&lt;/li&gt;
&lt;li&gt;Internet access (a decent speed broadband speed)&lt;/li&gt;
&lt;li&gt;A router (if you'd like to SSH from another PC into your server - useful for remote installations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process of converting the desktop to server is made very simple, using a tool called &lt;a href="https://help.ubuntu.com/community/Tasksel"&gt;Tasksel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal/console window in your Ubuntu Desktop and type in the following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install tasksel&lt;/li&gt;
&lt;li&gt;sudo tasksel remove ubuntu-desktop (Note: this may take a few minutes to complete)&lt;/li&gt;
&lt;li&gt;sudo tasksel install server&lt;/li&gt;
&lt;li&gt;apt-get install linux-server linux-image-server&lt;/li&gt;
&lt;li&gt;apt-get –purge remove lightdm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to type in each command (as listed by the each point) separately and wait for it to complete, before typing in the next command.&lt;/p&gt;
&lt;p&gt;Also, for this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tasksel remove ubuntu-desktop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you specify the correct desktop you are using (which could be Lubuntu or Kubuntu or Xubuntu).&lt;/p&gt;
&lt;p&gt;Once this is done, you will officially have Ubuntu Server installed on your PC using Wubi.&lt;/p&gt;
&lt;p&gt;You can test this out by restarting the PC and booting into Ubuntu. Give it some time, depending on your system.&lt;/p&gt;
&lt;p&gt;The next part is to fix the bootloader on Windows, so that you can operate your Ubuntu Server without a screen (and just be able to SSH into it).&lt;/p&gt;
&lt;h3&gt;Modifying the Windows bootloader&lt;/h3&gt;
&lt;p&gt;I have Win XP installed, so the instructions I found was for this OS. I initially followed these instructions &lt;a href="http://support.microsoft.com/kb/289022"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It didn't seem to work though. So I basically just went through the process of first backing up the boot.ini file (very important that you do this).&lt;/p&gt;
&lt;p&gt;The process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right-click My Computer, and then click Properties.
    -or-
   Click Start, click Run, type sysdm.cpl, and then click OK.&lt;/li&gt;
&lt;li&gt;On the Advanced tab, click Settings under Startup and Recovery.&lt;/li&gt;
&lt;li&gt;Under System Startup, click Edit. This opens the file in Notepad ready for editing.&lt;/li&gt;
&lt;li&gt;In Notepad, click File on the Menu bar, and then click Save As.&lt;/li&gt;
&lt;li&gt;Right click in an empty area of the Save As dialog box, point to New in the context menu, and then click Folder.&lt;/li&gt;
&lt;li&gt;Type a name for the new folder, for example temp, and then press the ENTER key to create the folder named temp.&lt;/li&gt;
&lt;li&gt;Double-click the new folder named temp, and then click the Save button to save a backup copy of the Boot.ini file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You could do this process any way you feel that will ensure that a boot.ini file is saved somewhere accessible.&lt;/p&gt;
&lt;p&gt;Now under point 3 above, you will see that you visited the "&lt;em&gt;System Startup&lt;/em&gt;" window, which shows the current boot order of your system.&lt;/p&gt;
&lt;p&gt;What I did was to simply select the Ubuntu Server option (it may still have a Desktop name to it) as the first boot choice, and it mariculously allowed me to have Ubuntu as the first option when booting (remember that when booting using Wubi, the first boot is the windows boot and when changing the bootloader on Windows, you are changing this bootloader and not the GRUB bootloader normally used on Ubuntu).&lt;/p&gt;
&lt;p&gt;Having the first option for booting means that I just need to switch the PC on and wait around 60 seconds (without a screen).&lt;/p&gt;
&lt;p&gt;After waiting for 60 seconds, I can SSH into the server successfully (using another PC through my router).&lt;/p&gt;
&lt;p&gt;I'm not going to explain how to SSH in this tutorial, as there are plenty of examples out there.&lt;/p&gt;
&lt;p&gt;Just remember that you will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP address of the Ubuntu Server machine&lt;/li&gt;
&lt;li&gt;Your old username and password (from when you installed Ubuntu Desktop)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any trouble getting Ubuntu-server installed, feel free to drop me an email and I will try to assist.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moe. H</dc:creator><pubDate>Tue, 01 Jul 2014 02:00:00 +0200</pubDate><guid>tag:,2014-07-01:2014/Jul/01/install-ubuntu-server-using-wubi/</guid><category>ubuntu-server</category><category>wubi</category></item></channel></rss>